{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Event, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Plot } from '../../core/plot';\nimport { deepAssign, findViewById } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { FIRST_AXES_VIEW, SECOND_AXES_VIEW, SERIES_FIELD_KEY } from './constant';\nimport { isHorizontal, syncViewPadding, transformData } from './utils';\nvar BidirectionalBar = /** @class */function (_super) {\n  __extends(BidirectionalBar, _super);\n  function BidirectionalBar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n    _this.type = 'bidirectional-bar';\n    return _this;\n  }\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n  BidirectionalBar.getDefaultOptions = function () {\n    return deepAssign({}, _super.getDefaultOptions.call(this), {\n      syncViewPadding: syncViewPadding\n    });\n  };\n  /**\n   * @override\n   */\n  BidirectionalBar.prototype.changeData = function (data) {\n    if (data === void 0) {\n      data = [];\n    }\n    this.chart.emit(VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null));\n    // 更新options\n    this.updateOption({\n      data: data\n    });\n    var _a = this.options,\n      xField = _a.xField,\n      yField = _a.yField,\n      layout = _a.layout;\n    // 处理数据\n    var groupData = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    var firstViewData = groupData[0],\n      secondViewData = groupData[1];\n    var firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    var secondView = findViewById(this.chart, SECOND_AXES_VIEW);\n    // 更新对应view的data\n    firstView.data(firstViewData);\n    secondView.data(secondViewData);\n    // 重新渲染\n    this.chart.render(true);\n    this.chart.emit(VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null));\n  };\n  BidirectionalBar.prototype.getDefaultOptions = function () {\n    return BidirectionalBar.getDefaultOptions();\n  };\n  /**\n   * 获取对称条形图的适配器\n   */\n  BidirectionalBar.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /** 对称条形图分类字段 */\n  BidirectionalBar.SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n  return BidirectionalBar;\n}(Plot);\nexport { BidirectionalBar };","map":{"version":3,"mappings":";AAAA,SAASA,KAAK,EAAEC,gBAAgB,QAAQ,UAAU;AAElD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,UAAU,EAAEC,YAAY,QAAQ,aAAa;AACtD,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,eAAe,EAAEC,gBAAgB,EAAEC,gBAAgB,QAAQ,YAAY;AAEhF,SAASC,YAAY,EAAEC,eAAe,EAAEC,aAAa,QAAQ,SAAS;AAItE;EAAsCC;EAAtC;IAAA;IAcE;IACOC,UAAI,GAAW,mBAAmB;;EAyC3C;EAvDE;;;;EAIOC,kCAAiB,GAAxB;IACE,OAAOX,UAAU,CAAC,EAAE,EAAEY,OAAMC,iBAAiB,WAAE,EAAE;MAC/CN,eAAe;KAChB,CAAC;EACJ,CAAC;EAQD;;;EAGOI,qCAAU,GAAjB,UAAkBG,IAAS;IAAT;MAAAA,SAAS;IAAA;IACzB,IAAI,CAACC,KAAK,CAACC,IAAI,CACblB,gBAAgB,CAACmB,kBAAkB,EACnCpB,KAAK,CAACqB,QAAQ,CAAC,IAAI,CAACH,KAAK,EAAEjB,gBAAgB,CAACmB,kBAAkB,EAAE,IAAI,CAAC,CACtE;IAED;IACA,IAAI,CAACE,YAAY,CAAC;MAAEL,IAAI;IAAA,CAAE,CAAC;IACrB,SAA6B,IAAI,CAACM,OAAO;MAAvCC,MAAM;MAAEC,MAAM;MAAEC,MAAM,YAAiB;IAC/C;IACA,IAAMC,SAAS,GAAUhB,aAAa,CAACa,MAAM,EAAEC,MAAM,EAAEjB,gBAAgB,EAAES,IAAI,EAAER,YAAY,CAACiB,MAAM,CAAC,CAAC;IAC7F,iBAAa,GAAoBC,SAAS,GAA7B;MAAEC,cAAc,GAAID,SAAS,GAAb;IACpC,IAAME,SAAS,GAAGzB,YAAY,CAAC,IAAI,CAACc,KAAK,EAAEZ,eAAe,CAAC;IAC3D,IAAMwB,UAAU,GAAG1B,YAAY,CAAC,IAAI,CAACc,KAAK,EAAEX,gBAAgB,CAAC;IAC7D;IACAsB,SAAS,CAACZ,IAAI,CAACc,aAAa,CAAC;IAC7BD,UAAU,CAACb,IAAI,CAACW,cAAc,CAAC;IAC/B;IACA,IAAI,CAACV,KAAK,CAACc,MAAM,CAAC,IAAI,CAAC;IAEvB,IAAI,CAACd,KAAK,CAACC,IAAI,CACblB,gBAAgB,CAACgC,iBAAiB,EAClCjC,KAAK,CAACqB,QAAQ,CAAC,IAAI,CAACH,KAAK,EAAEjB,gBAAgB,CAACgC,iBAAiB,EAAE,IAAI,CAAC,CACrE;EACH,CAAC;EAESnB,4CAAiB,GAA3B;IACE,OAAOA,gBAAgB,CAACE,iBAAiB,EAAE;EAC7C,CAAC;EAED;;;EAGUF,2CAAgB,GAA1B;IACE,OAAOT,OAAO;EAChB,CAAC;EA5CD;EACOS,iCAAgB,GAAGN,gBAAgB;EA4C5C,uBAAC;CAAA,CAxDqCN,IAAI;SAA7BY,gBAAgB","names":["Event","VIEW_LIFE_CIRCLE","Plot","deepAssign","findViewById","adaptor","FIRST_AXES_VIEW","SECOND_AXES_VIEW","SERIES_FIELD_KEY","isHorizontal","syncViewPadding","transformData","__extends","_this","BidirectionalBar","_super","getDefaultOptions","data","chart","emit","BEFORE_CHANGE_DATA","fromData","updateOption","options","xField","yField","layout","groupData","secondViewData","firstView","secondView","firstViewData","render","AFTER_CHANGE_DATA"],"sources":["C:\\Users\\sandeep dangi\\OneDrive\\Desktop\\6th sem\\3rd sem\\company que\\react project\\mern\\admin-app\\node_modules\\@antv\\g2plot\\src\\plots\\bidirectional-bar\\index.ts"],"sourcesContent":["import { Event, VIEW_LIFE_CIRCLE } from '@antv/g2';\nimport { Adaptor } from '../../core/adaptor';\nimport { Plot } from '../../core/plot';\nimport { deepAssign, findViewById } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { FIRST_AXES_VIEW, SECOND_AXES_VIEW, SERIES_FIELD_KEY } from './constant';\nimport { BidirectionalBarOptions } from './types';\nimport { isHorizontal, syncViewPadding, transformData } from './utils';\n\nexport type { BidirectionalBarOptions };\n\nexport class BidirectionalBar extends Plot<BidirectionalBarOptions> {\n  /**\n   * 获取 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<BidirectionalBarOptions> {\n    return deepAssign({}, super.getDefaultOptions(), {\n      syncViewPadding,\n    });\n  }\n\n  /** 对称条形图分类字段 */\n  static SERIES_FIELD_KEY = SERIES_FIELD_KEY;\n\n  /** 图表类型 */\n  public type: string = 'bidirectional-bar';\n\n  /**\n   * @override\n   */\n  public changeData(data = []) {\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.BEFORE_CHANGE_DATA, null)\n    );\n\n    // 更新options\n    this.updateOption({ data });\n    const { xField, yField, layout } = this.options;\n    // 处理数据\n    const groupData: any[] = transformData(xField, yField, SERIES_FIELD_KEY, data, isHorizontal(layout));\n    const [firstViewData, secondViewData] = groupData;\n    const firstView = findViewById(this.chart, FIRST_AXES_VIEW);\n    const secondView = findViewById(this.chart, SECOND_AXES_VIEW);\n    // 更新对应view的data\n    firstView.data(firstViewData);\n    secondView.data(secondViewData);\n    // 重新渲染\n    this.chart.render(true);\n\n    this.chart.emit(\n      VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA,\n      Event.fromData(this.chart, VIEW_LIFE_CIRCLE.AFTER_CHANGE_DATA, null)\n    );\n  }\n\n  protected getDefaultOptions() {\n    return BidirectionalBar.getDefaultOptions();\n  }\n\n  /**\n   * 获取对称条形图的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<BidirectionalBarOptions> {\n    return adaptor;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}