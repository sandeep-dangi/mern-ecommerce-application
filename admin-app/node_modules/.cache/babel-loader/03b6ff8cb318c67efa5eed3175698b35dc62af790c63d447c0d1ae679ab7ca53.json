{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport { Plot } from '../../core/plot';\nimport { getAllElementsRecursively } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { DEFAULT_OPTIONS, FUNNEL_CONVERSATION as FUNNEL_CONVERSATION_FIELD, FUNNEL_PERCENT, FUNNEL_TOTAL_PERCENT } from './constant';\nimport './interactions';\nexport { FUNNEL_CONVERSATION_FIELD };\nvar Funnel = /** @class */function (_super) {\n  __extends(Funnel, _super);\n  function Funnel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n    _this.type = 'funnel';\n    return _this;\n  }\n  Funnel.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * 获取 漏斗图 默认配置项\n   */\n  Funnel.prototype.getDefaultOptions = function () {\n    // 由于不同漏斗图 defaultOption 有部分逻辑不同，此处仅处理 core.getDefaultOptions 覆盖范围，funnel 的 defaulOption 为不分散逻辑统一写到 adaptor 的 defaultOption 中\n    return Funnel.getDefaultOptions();\n  };\n  /**\n   * 获取 漏斗图 的适配器\n   */\n  Funnel.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  Funnel.prototype.setState = function (type, condition, status) {\n    if (status === void 0) {\n      status = true;\n    }\n    var elements = getAllElementsRecursively(this.chart);\n    each(elements, function (ele) {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  };\n  /**\n   * 获取状态\n   */\n  Funnel.prototype.getStates = function () {\n    var elements = getAllElementsRecursively(this.chart);\n    var stateObjects = [];\n    each(elements, function (element) {\n      var data = element.getData();\n      var states = element.getStates();\n      each(states, function (state) {\n        stateObjects.push({\n          data: data,\n          state: state,\n          geometry: element.geometry,\n          element: element\n        });\n      });\n    });\n    return stateObjects;\n  };\n  // 内部变量\n  /** 漏斗 转化率 字段 */\n  Funnel.CONVERSATION_FIELD = FUNNEL_CONVERSATION_FIELD;\n  /** 漏斗 百分比 字段 */\n  Funnel.PERCENT_FIELD = FUNNEL_PERCENT;\n  /** 漏斗 总转换率百分比 字段 */\n  Funnel.TOTAL_PERCENT_FIELD = FUNNEL_TOTAL_PERCENT;\n  return Funnel;\n}(Plot);\nexport { Funnel };","map":{"version":3,"mappings":";AACA,SAASA,IAAI,QAAQ,YAAY;AAGjC,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,yBAAyB,QAAQ,aAAa;AACvD,SAASC,OAAO,QAAQ,WAAW;AACnC,SACEC,eAAe,EACfC,mBAAmB,IAAIC,yBAAyB,EAChDC,cAAc,EACdC,oBAAoB,QACf,YAAY;AACnB,OAAO,gBAAgB;AAIvB,SAASF,yBAAyB;AAElC;EAA4BG;EAA5B;IAAA;IACE;IACOC,UAAI,GAAW,QAAQ;;EA8DhC;EA5DSC,wBAAiB,GAAxB;IACE,OAAOP,eAAe;EACxB,CAAC;EAUD;;;EAGUO,kCAAiB,GAA3B;IACE;IACA,OAAOA,MAAM,CAACC,iBAAiB,EAAE;EACnC,CAAC;EAED;;;EAGUD,iCAAgB,GAA1B;IACE,OAAOR,OAAO;EAChB,CAAC;EAED;;;;;;EAMOQ,yBAAQ,GAAf,UAAgBE,IAAe,EAAEC,SAAyB,EAAEC,MAAsB;IAAtB;MAAAA,aAAsB;IAAA;IAChF,IAAMC,QAAQ,GAAGd,yBAAyB,CAAC,IAAI,CAACe,KAAK,CAAC;IAEtDjB,IAAI,CAACgB,QAAQ,EAAE,UAACE,GAAY;MAC1B,IAAIJ,SAAS,CAACI,GAAG,CAACC,OAAO,EAAE,CAAC,EAAE;QAC5BD,GAAG,CAACE,QAAQ,CAACP,IAAI,EAAEE,MAAM,CAAC;;IAE9B,CAAC,CAAC;EACJ,CAAC;EAED;;;EAGOJ,0BAAS,GAAhB;IACE,IAAMK,QAAQ,GAAGd,yBAAyB,CAAC,IAAI,CAACe,KAAK,CAAC;IAEtD,IAAMI,YAAY,GAAkB,EAAE;IACtCrB,IAAI,CAACgB,QAAQ,EAAE,UAACM,OAAgB;MAC9B,IAAMC,IAAI,GAAGD,OAAO,CAACH,OAAO,EAAE;MAC9B,IAAMK,MAAM,GAAGF,OAAO,CAACG,SAAS,EAAE;MAClCzB,IAAI,CAACwB,MAAM,EAAE,UAACE,KAAK;QACjBL,YAAY,CAACM,IAAI,CAAC;UAAEJ,IAAI;UAAEG,KAAK;UAAEE,QAAQ,EAAEN,OAAO,CAACM,QAAQ;UAAEN,OAAO;QAAA,CAAE,CAAC;MACzE,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAOD,YAAY;EACrB,CAAC;EAvDD;EACA;EACOV,yBAAkB,GAAGL,yBAAyB;EACrD;EACOK,oBAAa,GAAGJ,cAAc;EACrC;EACOI,0BAAmB,GAAGH,oBAAoB;EAkDnD,aAAC;CAAA,CAhE2BP,IAAI;SAAnBU,MAAM","names":["each","Plot","getAllElementsRecursively","adaptor","DEFAULT_OPTIONS","FUNNEL_CONVERSATION","FUNNEL_CONVERSATION_FIELD","FUNNEL_PERCENT","FUNNEL_TOTAL_PERCENT","__extends","_this","Funnel","getDefaultOptions","type","condition","status","elements","chart","ele","getData","setState","stateObjects","element","data","states","getStates","state","push","geometry"],"sources":["C:\\Users\\sandeep dangi\\OneDrive\\Desktop\\6th sem\\3rd sem\\company que\\react project\\mern\\admin-app\\node_modules\\@antv\\g2plot\\src\\plots\\funnel\\index.ts"],"sourcesContent":["import { Element } from '@antv/g2';\nimport { each } from '@antv/util';\nimport { StateCondition, StateName, StateObject } from '../..';\nimport { Adaptor } from '../../core/adaptor';\nimport { Plot } from '../../core/plot';\nimport { getAllElementsRecursively } from '../../utils';\nimport { adaptor } from './adaptor';\nimport {\n  DEFAULT_OPTIONS,\n  FUNNEL_CONVERSATION as FUNNEL_CONVERSATION_FIELD,\n  FUNNEL_PERCENT,\n  FUNNEL_TOTAL_PERCENT,\n} from './constant';\nimport './interactions';\nimport { FunnelOptions } from './types';\n\nexport type { FunnelOptions };\nexport { FUNNEL_CONVERSATION_FIELD };\n\nexport class Funnel extends Plot<FunnelOptions> {\n  /** 图表类型 */\n  public type: string = 'funnel';\n\n  static getDefaultOptions(): Partial<FunnelOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  // 内部变量\n  /** 漏斗 转化率 字段 */\n  static CONVERSATION_FIELD = FUNNEL_CONVERSATION_FIELD;\n  /** 漏斗 百分比 字段 */\n  static PERCENT_FIELD = FUNNEL_PERCENT;\n  /** 漏斗 总转换率百分比 字段 */\n  static TOTAL_PERCENT_FIELD = FUNNEL_TOTAL_PERCENT;\n\n  /**\n   * 获取 漏斗图 默认配置项\n   */\n  protected getDefaultOptions(): Partial<FunnelOptions> {\n    // 由于不同漏斗图 defaultOption 有部分逻辑不同，此处仅处理 core.getDefaultOptions 覆盖范围，funnel 的 defaulOption 为不分散逻辑统一写到 adaptor 的 defaultOption 中\n    return Funnel.getDefaultOptions();\n  }\n\n  /**\n   * 获取 漏斗图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<FunnelOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  public setState(type: StateName, condition: StateCondition, status: boolean = true) {\n    const elements = getAllElementsRecursively(this.chart);\n\n    each(elements, (ele: Element) => {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  }\n\n  /**\n   * 获取状态\n   */\n  public getStates(): StateObject[] {\n    const elements = getAllElementsRecursively(this.chart);\n\n    const stateObjects: StateObject[] = [];\n    each(elements, (element: Element) => {\n      const data = element.getData();\n      const states = element.getStates();\n      each(states, (state) => {\n        stateObjects.push({ data, state, geometry: element.geometry, element });\n      });\n    });\n\n    return stateObjects;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}