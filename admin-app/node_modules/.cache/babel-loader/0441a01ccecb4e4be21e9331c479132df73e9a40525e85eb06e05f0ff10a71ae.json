{"ast":null,"code":"import { createDotPattern } from './dot';\nimport { createLinePattern } from './line';\nimport { createSquarePattern } from './square';\n/**\n * 获取内置的 CanvasPattern 方法\n * @param options\n * @returns\n */\nexport function getCanvasPattern(options) {\n  var type = options.type,\n    cfg = options.cfg;\n  var pattern;\n  switch (type) {\n    case 'dot':\n      pattern = createDotPattern(cfg);\n      break;\n    case 'line':\n      pattern = createLinePattern(cfg);\n      break;\n    case 'square':\n      pattern = createSquarePattern(cfg);\n      break;\n    default:\n      break;\n  }\n  return pattern;\n}","map":{"version":3,"mappings":"AACA,SAASA,gBAAgB,QAAQ,OAAO;AACxC,SAASC,iBAAiB,QAAQ,QAAQ;AAC1C,SAASC,mBAAmB,QAAQ,UAAU;AAgB9C;;;;;AAKA,OAAM,SAAUC,gBAAgB,CAACC,OAAsB;EAC7C,QAAI,GAAUA,OAAO,KAAjB;IAAEC,GAAG,GAAKD,OAAO,IAAZ;EAEjB,IAAIE,OAAO;EAEX,QAAQC,IAAI;IACV,KAAK,KAAK;MACRD,OAAO,GAAGN,gBAAgB,CAACK,GAAG,CAAC;MAC/B;IACF,KAAK,MAAM;MACTC,OAAO,GAAGL,iBAAiB,CAACI,GAAG,CAAC;MAChC;IACF,KAAK,QAAQ;MACXC,OAAO,GAAGJ,mBAAmB,CAACG,GAAG,CAAC;MAClC;IACF;MACE;EAAM;EAGV,OAAOC,OAAO;AAChB","names":["createDotPattern","createLinePattern","createSquarePattern","getCanvasPattern","options","cfg","pattern","type"],"sources":["C:\\Users\\sandeep dangi\\OneDrive\\Desktop\\6th sem\\3rd sem\\company que\\react project\\mern\\admin-app\\node_modules\\@antv\\g2plot\\src\\utils\\pattern\\index.ts"],"sourcesContent":["import { DotPatternCfg, LinePatternCfg, SquarePatternCfg } from '../../types/pattern';\nimport { createDotPattern } from './dot';\nimport { createLinePattern } from './line';\nimport { createSquarePattern } from './square';\n\nexport type PatternOption =\n  | {\n      type: 'dot';\n      cfg?: DotPatternCfg;\n    }\n  | {\n      type: 'line';\n      cfg?: LinePatternCfg;\n    }\n  | {\n      type: 'square';\n      cfg?: SquarePatternCfg;\n    };\n\n/**\n * 获取内置的 CanvasPattern 方法\n * @param options\n * @returns\n */\nexport function getCanvasPattern(options: PatternOption): CanvasPattern | undefined {\n  const { type, cfg } = options;\n\n  let pattern;\n\n  switch (type) {\n    case 'dot':\n      pattern = createDotPattern(cfg);\n      break;\n    case 'line':\n      pattern = createLinePattern(cfg);\n      break;\n    case 'square':\n      pattern = createSquarePattern(cfg);\n      break;\n    default:\n      break;\n  }\n\n  return pattern;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}