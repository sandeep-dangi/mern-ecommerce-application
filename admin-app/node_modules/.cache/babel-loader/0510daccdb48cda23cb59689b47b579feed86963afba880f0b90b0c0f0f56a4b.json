{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { each, filter, isMatch } from '@antv/util';\nimport { brushInteraction } from '../../adaptor/brush';\nimport { animation, annotation, interaction, limitInPlot, scale, scrollbar, slider, state, theme, transformations } from '../../adaptor/common';\nimport { connectedArea } from '../../adaptor/connected-area';\nimport { conversionTag } from '../../adaptor/conversion-tag';\nimport { interval } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { adjustYMetaByZero, deepAssign, findGeometry, flow, pick, transformLabel } from '../../utils';\nimport { getDataWhetherPercentage, getDeepPercent } from '../../utils/transform/percent';\n/**\n * defaultOptions\n * @param params\n */\nfunction defaultOptions(params) {\n  var options = params.options;\n  // 默认 legend 位置\n  var legend = options.legend;\n  var seriesField = options.seriesField,\n    isStack = options.isStack;\n  if (seriesField) {\n    if (legend !== false) {\n      legend = __assign({\n        position: isStack ? 'right-top' : 'top-left'\n      }, legend);\n    }\n  } else {\n    legend = false;\n  }\n  // @ts-ignore 直接改值\n  params.options.legend = legend;\n  return params;\n}\n/**\n * 字段\n * @param params\n */\nfunction geometry(params) {\n  var chart = params.chart,\n    options = params.options;\n  var data = options.data,\n    columnStyle = options.columnStyle,\n    color = options.color,\n    columnWidthRatio = options.columnWidthRatio,\n    isPercent = options.isPercent,\n    isGroup = options.isGroup,\n    isStack = options.isStack,\n    xField = options.xField,\n    yField = options.yField,\n    seriesField = options.seriesField,\n    groupField = options.groupField,\n    tooltip = options.tooltip,\n    shape = options.shape;\n  var percentData = isPercent && isGroup && isStack ? getDeepPercent(data, yField, [xField, groupField], yField) : getDataWhetherPercentage(data, yField, xField, yField, isPercent);\n  var chartData = [];\n  // 存在堆叠,并且存在堆叠seriesField分类，并且不存在分组的时候 进行堆叠\n  if (isStack && seriesField && !isGroup) {\n    percentData.forEach(function (item) {\n      var stackedItem = chartData.find(function (v) {\n        return v[xField] === item[xField] && v[seriesField] === item[seriesField];\n      });\n      if (stackedItem) {\n        stackedItem[yField] += item[yField] || 0;\n      } else {\n        chartData.push(__assign({}, item));\n      }\n    });\n  } else {\n    chartData = percentData;\n  }\n  chart.data(chartData);\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  var tooltipOptions = isPercent ? __assign({\n    formatter: function (datum) {\n      return {\n        name: isGroup && isStack ? datum[seriesField] + \" - \" + datum[groupField] : datum[seriesField] || datum[xField],\n        value: (Number(datum[yField]) * 100).toFixed(2) + '%'\n      };\n    }\n  }, tooltip) : tooltip;\n  var p = deepAssign({}, params, {\n    options: {\n      data: chartData,\n      widthRatio: columnWidthRatio,\n      tooltip: tooltipOptions,\n      interval: {\n        shape: shape,\n        style: columnStyle,\n        color: color\n      }\n    }\n  });\n  interval(p);\n  return p;\n}\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params) {\n  var _a, _b;\n  var options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField,\n    data = options.data,\n    isPercent = options.isPercent;\n  var percentYMeta = isPercent ? {\n    max: 1,\n    min: 0,\n    minLimit: 0,\n    maxLimit: 1\n  } : {};\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a), (_b = {}, _b[xField] = {\n    type: 'cat'\n  }, _b[yField] = __assign(__assign({}, adjustYMetaByZero(data, yField)), percentYMeta), _b)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params) {\n  var chart = params.chart,\n    options = params.options;\n  var xAxis = options.xAxis,\n    yAxis = options.yAxis,\n    xField = options.xField,\n    yField = options.yField;\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params) {\n  var chart = params.chart,\n    options = params.options;\n  var legend = options.legend,\n    seriesField = options.seriesField;\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\nfunction label(params) {\n  var chart = params.chart,\n    options = params.options;\n  var label = options.label,\n    yField = options.yField,\n    isRange = options.isRange;\n  var geometry = findGeometry(chart, 'interval');\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n      cfg = __rest(label, [\"callback\"]);\n    geometry.label({\n      fields: [yField],\n      callback: callback,\n      cfg: __assign({\n        // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n        layout: (cfg === null || cfg === void 0 ? void 0 : cfg.position) ? undefined : [{\n          type: 'interval-adjust-position'\n        }, {\n          type: 'interval-hide-overlap'\n        }, {\n          type: 'adjust-color'\n        }, {\n          type: 'limit-in-plot',\n          cfg: {\n            action: 'hide'\n          }\n        }]\n      }, transformLabel(isRange ? __assign({\n        content: function (item) {\n          var _a;\n          return (_a = item[yField]) === null || _a === void 0 ? void 0 : _a.join('-');\n        }\n      }, cfg) : cfg))\n    });\n  }\n  return params;\n}\n/**\n * 柱形图 tooltip 配置 (对堆叠、分组做特殊处理)\n * @param params\n */\nfunction columnTooltip(params) {\n  var chart = params.chart,\n    options = params.options;\n  var tooltip = options.tooltip,\n    isGroup = options.isGroup,\n    isStack = options.isStack,\n    groupField = options.groupField,\n    data = options.data,\n    xField = options.xField,\n    yField = options.yField,\n    seriesField = options.seriesField;\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    var tooltipOptions = tooltip;\n    // fix: https://github.com/antvis/G2Plot/issues/2572\n    if (isGroup && isStack) {\n      var customItems_1 = tooltipOptions.customItems;\n      var tooltipFormatter_1 = (tooltipOptions === null || tooltipOptions === void 0 ? void 0 : tooltipOptions.formatter) || function (datum) {\n        return {\n          name: datum[seriesField] + \" - \" + datum[groupField],\n          value: datum[yField]\n        };\n      };\n      tooltipOptions = __assign(__assign({}, tooltipOptions), {\n        customItems: function (originalItems) {\n          var items = [];\n          each(originalItems, function (item) {\n            // Find datas in same cluster\n            var datas = filter(data, function (d) {\n              return isMatch(d, pick(item.data, [xField, seriesField]));\n            });\n            datas.forEach(function (datum) {\n              items.push(__assign(__assign(__assign({}, item), {\n                value: datum[yField],\n                data: datum,\n                mappingData: {\n                  _origin: datum\n                }\n              }), tooltipFormatter_1(datum)));\n            });\n          });\n          // fix https://github.com/antvis/G2Plot/issues/3367\n          return customItems_1 ? customItems_1(items) : items;\n        }\n      });\n    }\n    chart.tooltip(tooltipOptions);\n  }\n  return params;\n}\n/**\n * 柱形图适配器\n * @param params\n */\nexport function adaptor(params, isBar) {\n  if (isBar === void 0) {\n    isBar = false;\n  }\n  var options = params.options;\n  var seriesField = options.seriesField;\n  return flow(defaultOptions,\n  // 处理默认配置\n  theme,\n  // theme 需要在 geometry 之前\n  pattern('columnStyle'), state, transformations('rect'), geometry, meta, axis, legend, columnTooltip, slider, scrollbar, label, brushInteraction, interaction, animation, annotation(), conversionTag(options.yField, !isBar, !!seriesField),\n  // 有拆分的时候禁用转化率\n  connectedArea(!options.isStack), limitInPlot)(params);\n}","map":{"version":3,"mappings":"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","names":["each","filter","isMatch","brushInteraction","animation","annotation","interaction","limitInPlot","scale","scrollbar","slider","state","theme","transformations","connectedArea","conversionTag","interval","pattern","adjustYMetaByZero","deepAssign","findGeometry","flow","pick","transformLabel","getDataWhetherPercentage","getDeepPercent","defaultOptions","params","options","isStack","seriesField","legend","position","geometry","columnStyle","color","columnWidthRatio","isPercent","isGroup","xField","yField","groupField","tooltip","shape","percentData","data","chartData","forEach","item","stackedItem","find","v","push","chart","tooltipOptions","__assign","formatter","datum","name","value","Number","toFixed","p","widthRatio","style","meta","yAxis","percentYMeta","max","min","minLimit","maxLimit","_a","xAxis","_b","type","axis","label","isRange","cfg","fields","callback","layout","undefined","action","content","join","columnTooltip","tooltipFormatter_1","customItems","originalItems","items","datas","d","mappingData","_origin","customItems_1","adaptor","isBar"],"sources":["C:\\Users\\sandeep dangi\\OneDrive\\Desktop\\6th sem\\3rd sem\\company que\\react project\\mern\\admin-app\\node_modules\\@antv\\g2plot\\src\\plots\\column\\adaptor.ts"],"sourcesContent":["import { Types } from '@antv/g2';\nimport { each, filter, isMatch } from '@antv/util';\nimport { brushInteraction } from '../../adaptor/brush';\nimport {\n  animation,\n  annotation,\n  interaction,\n  limitInPlot,\n  scale,\n  scrollbar,\n  slider,\n  state,\n  theme,\n  transformations,\n} from '../../adaptor/common';\nimport { connectedArea } from '../../adaptor/connected-area';\nimport { conversionTag } from '../../adaptor/conversion-tag';\nimport { interval } from '../../adaptor/geometries';\nimport { pattern } from '../../adaptor/pattern';\nimport { Params } from '../../core/adaptor';\nimport { Datum } from '../../types';\nimport { adjustYMetaByZero, deepAssign, findGeometry, flow, pick, transformLabel } from '../../utils';\nimport { getDataWhetherPercentage, getDeepPercent } from '../../utils/transform/percent';\nimport { ColumnOptions } from './types';\n\n/**\n * defaultOptions\n * @param params\n */\nfunction defaultOptions(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { options } = params;\n  // 默认 legend 位置\n  let { legend } = options;\n  const { seriesField, isStack } = options;\n\n  if (seriesField) {\n    if (legend !== false) {\n      legend = {\n        position: isStack ? 'right-top' : 'top-left',\n        ...legend,\n      };\n    }\n  } else {\n    legend = false;\n  }\n\n  // @ts-ignore 直接改值\n  params.options.legend = legend;\n  return params;\n}\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const {\n    data,\n    columnStyle,\n    color,\n    columnWidthRatio,\n    isPercent,\n    isGroup,\n    isStack,\n    xField,\n    yField,\n    seriesField,\n    groupField,\n    tooltip,\n    shape,\n  } = options;\n\n  const percentData =\n    isPercent && isGroup && isStack\n      ? getDeepPercent(data, yField, [xField, groupField], yField)\n      : getDataWhetherPercentage(data, yField, xField, yField, isPercent);\n\n  let chartData = [];\n\n  // 存在堆叠,并且存在堆叠seriesField分类，并且不存在分组的时候 进行堆叠\n  if (isStack && seriesField && !isGroup) {\n    percentData.forEach((item) => {\n      const stackedItem = chartData.find((v) => v[xField] === item[xField] && v[seriesField] === item[seriesField]);\n      if (stackedItem) {\n        stackedItem[yField] += item[yField] || 0;\n      } else {\n        chartData.push({ ...item });\n      }\n    });\n  } else {\n    chartData = percentData;\n  }\n\n  chart.data(chartData);\n\n  // 百分比堆积图，默认会给一个 % 格式化逻辑, 用户可自定义\n  const tooltipOptions = isPercent\n    ? {\n        formatter: (datum: Datum) => ({\n          name:\n            isGroup && isStack ? `${datum[seriesField]} - ${datum[groupField]}` : datum[seriesField] || datum[xField],\n          value: (Number(datum[yField]) * 100).toFixed(2) + '%',\n        }),\n        ...tooltip,\n      }\n    : tooltip;\n\n  const p = deepAssign({}, params, {\n    options: {\n      data: chartData,\n      widthRatio: columnWidthRatio,\n      tooltip: tooltipOptions,\n      interval: {\n        shape,\n        style: columnStyle,\n        color,\n      },\n    },\n  });\n  interval(p);\n\n  return p;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, xField, yField, data, isPercent } = options;\n\n  const percentYMeta = isPercent ? { max: 1, min: 0, minLimit: 0, maxLimit: 1 } : {};\n\n  return flow(\n    scale(\n      {\n        [xField]: xAxis,\n        [yField]: yAxis,\n      },\n      {\n        [xField]: {\n          type: 'cat',\n        },\n        [yField]: {\n          ...adjustYMetaByZero(data, yField),\n          ...percentYMeta,\n        },\n      }\n    )\n  )(params);\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { legend, seriesField } = options;\n\n  if (legend && seriesField) {\n    chart.legend(seriesField, legend);\n  } else if (legend === false) {\n    chart.legend(false);\n  }\n\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { label, yField, isRange } = options;\n\n  const geometry = findGeometry(chart, 'interval');\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [yField],\n      callback,\n      cfg: {\n        // 配置默认的 label layout： 如果用户没有指定 layout 和 position， 则自动配置 layout\n        layout: cfg?.position\n          ? undefined\n          : [\n              { type: 'interval-adjust-position' },\n              { type: 'interval-hide-overlap' },\n              { type: 'adjust-color' },\n              { type: 'limit-in-plot', cfg: { action: 'hide' } },\n            ],\n        ...transformLabel(\n          isRange\n            ? {\n                content: (item: object) => {\n                  return item[yField]?.join('-');\n                },\n                ...cfg,\n              }\n            : cfg\n        ),\n      },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 柱形图 tooltip 配置 (对堆叠、分组做特殊处理)\n * @param params\n */\nfunction columnTooltip(params: Params<ColumnOptions>): Params<ColumnOptions> {\n  const { chart, options } = params;\n  const { tooltip, isGroup, isStack, groupField, data, xField, yField, seriesField } = options;\n\n  if (tooltip === false) {\n    chart.tooltip(false);\n  } else {\n    let tooltipOptions = tooltip;\n    // fix: https://github.com/antvis/G2Plot/issues/2572\n    if (isGroup && isStack) {\n      const { customItems } = tooltipOptions;\n      const tooltipFormatter =\n        tooltipOptions?.formatter ||\n        ((datum: Datum) => ({ name: `${datum[seriesField]} - ${datum[groupField]}`, value: datum[yField] }));\n      tooltipOptions = {\n        ...tooltipOptions,\n        customItems: (originalItems: Types.TooltipItem[]) => {\n          const items: Types.TooltipItem[] = [];\n          each(originalItems, (item: Types.TooltipItem) => {\n            // Find datas in same cluster\n            const datas = filter(data, (d) => isMatch(d, pick(item.data, [xField, seriesField])));\n            datas.forEach((datum) => {\n              items.push({\n                ...item,\n                value: datum[yField],\n                data: datum,\n                mappingData: { _origin: datum },\n                ...tooltipFormatter(datum),\n              });\n            });\n          });\n          // fix https://github.com/antvis/G2Plot/issues/3367\n          return customItems ? customItems(items) : items;\n        },\n      };\n    }\n    chart.tooltip(tooltipOptions);\n  }\n\n  return params;\n}\n\n/**\n * 柱形图适配器\n * @param params\n */\nexport function adaptor(params: Params<ColumnOptions>, isBar = false) {\n  const { options } = params;\n  const { seriesField } = options;\n  return flow(\n    defaultOptions, // 处理默认配置\n    theme, // theme 需要在 geometry 之前\n    pattern('columnStyle'),\n    state,\n    transformations('rect'),\n    geometry,\n    meta,\n    axis,\n    legend,\n    columnTooltip,\n    slider,\n    scrollbar,\n    label,\n    brushInteraction,\n    interaction,\n    animation,\n    annotation(),\n    conversionTag<ColumnOptions>(options.yField, !isBar, !!seriesField), // 有拆分的时候禁用转化率\n    connectedArea<ColumnOptions>(!options.isStack),\n    limitInPlot\n  )(params);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}