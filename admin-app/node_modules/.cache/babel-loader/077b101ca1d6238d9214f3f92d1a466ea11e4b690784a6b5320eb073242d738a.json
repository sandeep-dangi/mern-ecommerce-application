{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport { isRealNumber, pick } from '../../utils';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { cutoffCircle } from './circle';\nimport { sankeyLayout } from './layout';\n/**\n * 是否是 node-link 类型的数据结构\n * @param dataTyp\n * @returns\n */\nfunction isNodeLink(dataType) {\n  return dataType === 'node-link';\n}\nexport function getNodeWidthRatio(nodeWidth, nodeWidthRatio, width) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\nexport function getNodePaddingRatio(nodePadding, nodePaddingRatio, height) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\nexport function transformToViewsData(options, width, height) {\n  var dataType = options.dataType,\n    data = options.data,\n    sourceField = options.sourceField,\n    targetField = options.targetField,\n    weightField = options.weightField,\n    nodeAlign = options.nodeAlign,\n    nodeSort = options.nodeSort,\n    nodePadding = options.nodePadding,\n    nodePaddingRatio = options.nodePaddingRatio,\n    nodeWidth = options.nodeWidth,\n    nodeWidthRatio = options.nodeWidthRatio,\n    nodeDepth = options.nodeDepth,\n    _a = options.rawFields,\n    rawFields = _a === void 0 ? [] : _a;\n  var sankeyLayoutInputData;\n  if (!isNodeLink(dataType)) {\n    sankeyLayoutInputData = transformDataToNodeLinkData(cutoffCircle(data, sourceField, targetField), sourceField, targetField, weightField, rawFields);\n  } else {\n    sankeyLayoutInputData = data;\n  }\n  // 3. layout 之后的数据\n  var _b = sankeyLayout({\n      nodeAlign: nodeAlign,\n      nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n      nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n      nodeSort: nodeSort,\n      nodeDepth: nodeDepth\n    }, sankeyLayoutInputData),\n    nodes = _b.nodes,\n    links = _b.links;\n  // 4. 生成绘图数据\n  return {\n    nodes: nodes.map(function (node) {\n      return __assign(__assign({}, pick(node, __spreadArrays(['x', 'y', 'name'], rawFields))), {\n        isNode: true\n      });\n    }),\n    edges: links.map(function (link) {\n      return __assign(__assign({\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name\n      }, pick(link, __spreadArrays(['x', 'y', 'value'], rawFields))), {\n        isNode: false\n      });\n    })\n  };\n}","map":{"version":3,"mappings":";AACA,SAASA,YAAY,EAAEC,IAAI,QAAQ,aAAa;AAChD,SAASC,2BAA2B,QAAQ,kBAAkB;AAC9D,SAASC,YAAY,QAAQ,UAAU;AACvC,SAASC,YAAY,QAA+B,UAAU;AAG9D;;;;;AAKA,SAASC,UAAU,CAACC,QAAgB;EAClC,OAAOA,QAAQ,KAAK,WAAW;AACjC;AAEA,OAAM,SAAUC,iBAAiB,CAACC,SAAiB,EAAEC,cAAsB,EAAEC,KAAa;EACxF,OAAOV,YAAY,CAACQ,SAAS,CAAC,GAAGA,SAAS,GAAGE,KAAK,GAAGD,cAAc;AACrE;AAEA,OAAM,SAAUE,mBAAmB,CAACC,WAAmB,EAAEC,gBAAwB,EAAEC,MAAc;EAC/F,OAAOd,YAAY,CAACY,WAAW,CAAC,GAAGA,WAAW,GAAGE,MAAM,GAAGD,gBAAgB;AAC5E;AAEA;;;;;;AAMA,OAAM,SAAUE,oBAAoB,CAACC,OAAsB,EAAEN,KAAa,EAAEI,MAAc;EAEtF,YAAQ,GAaNE,OAAO,SAbD;IACRC,IAAI,GAYFD,OAAO,KAZL;IACJE,WAAW,GAWTF,OAAO,YAXE;IACXG,WAAW,GAUTH,OAAO,YAVE;IACXI,WAAW,GASTJ,OAAO,YATE;IACXK,SAAS,GAQPL,OAAO,UARA;IACTM,QAAQ,GAONN,OAAO,SAPD;IACRJ,WAAW,GAMTI,OAAO,YANE;IACXH,gBAAgB,GAKdG,OAAO,iBALO;IAChBR,SAAS,GAIPQ,OAAO,UAJA;IACTP,cAAc,GAGZO,OAAO,eAHK;IACdO,SAAS,GAEPP,OAAO,UAFA;IACTQ,KACER,OAAO,UADK;IAAdS,SAAS,mBAAG,EAAE;EAGhB,IAAIC,qBAA8B;EAElC,IAAI,CAACrB,UAAU,CAACC,QAAQ,CAAC,EAAE;IACzBoB,qBAAqB,GAAGxB,2BAA2B,CACjDC,YAAY,CAACc,IAAY,EAAEC,WAAW,EAAEC,WAAW,CAAC,EACpDD,WAAW,EACXC,WAAW,EACXC,WAAW,EACXK,SAAS,CACV;GACF,MAAM;IACLC,qBAAqB,GAAGT,IAAI;;EAG9B;EACM,SAAmBb,YAAY,CACnC;MACEiB,SAAS;MACTT,WAAW,EAAED,mBAAmB,CAACC,WAAW,EAAEC,gBAAgB,EAAEC,MAAM,CAAC;MACvEN,SAAS,EAAED,iBAAiB,CAACC,SAAS,EAAEC,cAAc,EAAEC,KAAK,CAAC;MAC9DY,QAAQ;MACRC,SAAS;KACV,EACDG,qBAA8C,CAC/C;IATOC,KAAK;IAAEC,KAAK,WASnB;EAED;EACA,OAAO;IACLD,KAAK,EAAEA,KAAK,CAACE,GAAG,CAAC,UAACC,IAAI;MACpB,6BACK7B,IAAI,CAAC6B,IAAI,kBAAG,GAAG,EAAE,GAAG,EAAE,MAAM,GAAKL,SAAS,EAAE;QAC/CM,MAAM,EAAE;MAAI;IAEhB,CAAC,CAAC;IACFC,KAAK,EAAEJ,KAAK,CAACC,GAAG,CAAC,UAACI,IAAI;MACpB;QACEC,MAAM,EAAED,IAAI,CAACC,MAAM,CAACC,IAAI;QACxBC,MAAM,EAAEH,IAAI,CAACG,MAAM,CAACD,IAAI;QACxBA,IAAI,EAAEF,IAAI,CAACC,MAAM,CAACC,IAAI,IAAIF,IAAI,CAACG,MAAM,CAACD;MAAI,GACvClC,IAAI,CAACgC,IAAI,kBAAG,GAAG,EAAE,GAAG,EAAE,OAAO,GAAKR,SAAS,EAAE;QAChDM,MAAM,EAAE;MAAK;IAEjB,CAAC;GACF;AACH","names":["isRealNumber","pick","transformDataToNodeLinkData","cutoffCircle","sankeyLayout","isNodeLink","dataType","getNodeWidthRatio","nodeWidth","nodeWidthRatio","width","getNodePaddingRatio","nodePadding","nodePaddingRatio","height","transformToViewsData","options","data","sourceField","targetField","weightField","nodeAlign","nodeSort","nodeDepth","_a","rawFields","sankeyLayoutInputData","nodes","links","map","node","isNode","edges","link","source","name","target"],"sources":["C:\\Users\\sandeep dangi\\OneDrive\\Desktop\\6th sem\\3rd sem\\company que\\react project\\admin-app\\node_modules\\@antv\\g2plot\\src\\plots\\sankey\\helper.ts"],"sourcesContent":["import { Data } from '../../types';\nimport { isRealNumber, pick } from '../../utils';\nimport { transformDataToNodeLinkData } from '../../utils/data';\nimport { cutoffCircle } from './circle';\nimport { sankeyLayout, SankeyLayoutInputData } from './layout';\nimport { SankeyOptions } from './types';\n\n/**\n * 是否是 node-link 类型的数据结构\n * @param dataTyp\n * @returns\n */\nfunction isNodeLink(dataType: string) {\n  return dataType === 'node-link';\n}\n\nexport function getNodeWidthRatio(nodeWidth: number, nodeWidthRatio: number, width: number) {\n  return isRealNumber(nodeWidth) ? nodeWidth / width : nodeWidthRatio;\n}\n\nexport function getNodePaddingRatio(nodePadding: number, nodePaddingRatio: number, height: number) {\n  return isRealNumber(nodePadding) ? nodePadding / height : nodePaddingRatio;\n}\n\n/**\n * 将桑基图配置经过 layout，生成最终的 view 数据\n * @param options\n * @param width\n * @param height\n */\nexport function transformToViewsData(options: SankeyOptions, width: number, height: number) {\n  const {\n    dataType,\n    data,\n    sourceField,\n    targetField,\n    weightField,\n    nodeAlign,\n    nodeSort,\n    nodePadding,\n    nodePaddingRatio,\n    nodeWidth,\n    nodeWidthRatio,\n    nodeDepth,\n    rawFields = [],\n  } = options;\n\n  let sankeyLayoutInputData: unknown;\n\n  if (!isNodeLink(dataType)) {\n    sankeyLayoutInputData = transformDataToNodeLinkData(\n      cutoffCircle(data as Data, sourceField, targetField),\n      sourceField,\n      targetField,\n      weightField,\n      rawFields\n    );\n  } else {\n    sankeyLayoutInputData = data;\n  }\n\n  // 3. layout 之后的数据\n  const { nodes, links } = sankeyLayout(\n    {\n      nodeAlign,\n      nodePadding: getNodePaddingRatio(nodePadding, nodePaddingRatio, height),\n      nodeWidth: getNodeWidthRatio(nodeWidth, nodeWidthRatio, width),\n      nodeSort,\n      nodeDepth,\n    },\n    sankeyLayoutInputData as SankeyLayoutInputData\n  );\n\n  // 4. 生成绘图数据\n  return {\n    nodes: nodes.map((node) => {\n      return {\n        ...pick(node, ['x', 'y', 'name', ...rawFields]),\n        isNode: true,\n      };\n    }),\n    edges: links.map((link) => {\n      return {\n        source: link.source.name,\n        target: link.target.name,\n        name: link.source.name || link.target.name,\n        ...pick(link, ['x', 'y', 'value', ...rawFields]),\n        isNode: false,\n      };\n    }),\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}